<template>
    <h2>Nono 组件 Demo (完整指令集)</h2>

    <!-- ======================================== -->
    <!-- 1. 基本计数器 (父组件状态) 与 Watch 示例 -->
    <!-- ======================================== -->
    <div class="container">
        <h3>1. 父组件计数器 与 Watch 示例</h3>
        <p>
            父组件计数值: <strong>{{ count }}</strong>
        </p>
        <button @click="count(count() + 1)">父组件 加 1</button>
        <button @click="add2ToCount()">父组件 加 2 (方法)</button>

        <h4>Watch 示例:</h4>
        <p>监听 <code>count</code> 值的变化 (非立即执行):</p>
        <ul id="watch-log-count">
            <li n-if="!watchLogCount.length"><em>等待 count 变化...</em></li>
            <li n-for="log in watchLogCount">{{ log }}</li>
        </ul>

        <p style="margin-top: 15px">监听 <code>anotherCount</code> 值的变化 (立即执行):</p>
        <p>
            AnotherCount 当前值: <strong>{{ anotherCount }}</strong>
        </p>
        <button @click="anotherCount(anotherCount() + 5)">AnotherCount 加 5</button>
        <ul id="watch-log-another-count">
            <li n-if="!watchLogAnotherCount.length"><em>等待 anotherCount 变化...</em></li>
            <li n-for="log in watchLogAnotherCount">{{ log }}</li>
        </ul>
        <button @click="toggleWatchers" :disabled="!watchersActive">
            {{ watchersActive ? "停止所有 Watcher" : "Watchers 已停止" }}
        </button>
    </div>

    <!-- ======================================== -->
    <!-- 2. 属性绑定 (:attribute) 示例 -->
    <!-- ======================================== -->
    <div class="container">
        <h3>2. 属性绑定 (:attribute) 示例</h3>
        <p :class="{ highlight: isHighlighted, 'text-large': true }">这段文字根据 isHighlighted 状态动态添加 'highlight' 类。 (对象语法)</p>
        <p :class="isHighlighted ? 'highlight-alt' : 'normal-text'">这段文字根据 isHighlighted 状态切换 'highlight-alt' 或 'normal-text' 类。 (三元表达式)</p>
        <p :style="{ color: textColor, fontSize: count + 14 + 'px' }">这段文字的颜色 (textColor) 和字号 (基于 count) 是动态绑定的。</p>
        <button :disabled="isButtonDisabled">这个按钮的 disabled 状态由 isButtonDisabled 控制</button>
        <div>
            <img :src="imageUrl" :alt="imageAltText" width="100" />
            <p>图片来源 (imageUrl): {{ imageUrl }}</p>
        </div>
        <div :data-count="count">这个 div 有一个动态的 data-count 属性: {{ count }}</div>
        <button @click="toggleHighlight()">切换高亮</button>
        <button @click="changeTextColor()">改变文字颜色</button>
        <button @click="toggleDisable()">切换按钮禁用</button>
        <button @click="changeImage()">切换图片</button>
    </div>

    <!-- ======================================== -->
    <!-- 3. 双向绑定 (n-model) 示例 -->
    <!-- ======================================== -->
    <div class="container">
        <h3>3. 双向绑定 (n-model) 示例</h3>
        <div>
            <label for="text-input">文本输入: </label>
            <input type="text" id="text-input" n-model="textInput" />
            <p>输入的值: {{ textInput }}</p>
        </div>
        <div>
            <input type="checkbox" id="checkbox-input" n-model="isChecked" />
            <label for="checkbox-input">是否选中: {{ isChecked }}</label>
        </div>
        <div>
            <p>单选按钮选择: {{ radioValue }}</p>
            <input type="radio" id="radio-one" value="选项一" n-model="radioValue" />
            <label for="radio-one">选项一</label>
            <br />
            <input type="radio" id="radio-two" value="选项二" n-model="radioValue" />
            <label for="radio-two">选项二</label>
        </div>
        <div>
            <label for="textarea-input">文本域:</label><br />
            <textarea id="textarea-input" n-model="textAreaContent" rows="3" cols="30"></textarea>
            <p>文本域内容预览:</p>
            <pre>{{ textAreaContent }}</pre>
        </div>
        <div>
            <label for="select-input">下拉选择:</label>
            <select id="select-input" n-model="selectedValue">
                <option value="">请选择</option>
                <option value="A">选项 A</option>
                <option value="B">选项 B</option>
                <option value="C">选项 C</option>
            </select>
            <p>选中的值: {{ selectedValue }}</p>
        </div>
    </div>

    <!-- ======================================== -->
    <!-- 4. 条件渲染 (n-if) 与 条件显示 (n-show) -->
    <!-- ======================================== -->
    <div class="container">
        <h3>4. 条件渲染 (n-if) 与 条件显示 (n-show)</h3>
        <button @click="showElement(!showElement())">切换显示状态 (当前: {{ showElement }})</button>
        <h4>n-if 示例</h4>
        <div n-if="showElement">
            <p>这个 div 使用 <strong>n-if="showElement"</strong> 控制。</p>
            <p>当条件为 false 时，它会从 DOM 中移除。</p>
            <p>内部计数器: {{ count }}</p>
        </div>
        <p n-if="!showElement">n-if 的内容已隐藏 (DOM 中不存在)。</p>
        <h4>n-show 示例</h4>
        <div n-show="showElement" class="show-box">
            <p>这个 div 使用 <strong>n-show="showElement"</strong> 控制。</p>
            <p>当条件为 false 时，它会设置 style="display: none;"，但仍在 DOM 中。</p>
            <p>内部计数器: {{ count }}</p>
        </div>
        <p>n-show 的元素始终在 DOM 树中，检查元素面板可以看到。</p>
    </div>

    <!-- ======================================== -->
    <!-- 5. 列表渲染 (n-for) 示例 -->
    <!-- ======================================== -->
    <div class="container">
        <h3>5. 列表渲染 (n-for) 示例</h3>
        <button @click="addItem()">添加列表项</button>
        <button @click="shuffleItems()">打乱列表项</button>
        <ul>
            <li n-for="(item, index) in items" :key="item.id">
                索引 {{ index }}:
                {{ item.name }}
                (ID: {{ item.id }})
                <button @click="removeItem(item.id)">移除</button>
                <span :style="{ color: item.id % 2 === 0 ? 'blue' : 'green' }"> (样式绑定)</span>
            </li>
        </ul>
        <p n-if="items.length === 0">列表为空。</p>
    </div>

    <!-- ======================================== -->
    <!-- 6. HTML 内容绑定 (n-html) 示例 -->
    <!-- ======================================== -->
    <div class="container">
        <h3>6. HTML 内容绑定 (n-html) 示例</h3>
        <p>下面的内容由 n-html 渲染 (注意 XSS 风险):</p>
        <div class="html-container" n-html="rawHtmlContent"></div>
        <button @click="changeHtmlContent()">改变 HTML 内容</button>
    </div>

    <!-- ======================================== -->
    <!-- 7. 子组件示例 (带插槽) -->
    <!-- ======================================== -->
    <div class="container">
        <h3>7. 子组件示例 (带插槽)</h3>
        <p>要传递给子组件的消息 (动态 Prop): {{ message }}</p>
        <button @click="changeMessage()">改变父组件消息 (会更新子组件)</button>
        <p>下面是子组件的内容:</p>

        <child-component src="./child-component.nue" :message="message" static-message="这是来自父组件的静态问候" @child-notified="handleChildEvent($event)">
            <p>这是父组件提供的<strong>默认插槽</strong>内容。</p>
            <p>
                父组件计数器值: <strong>{{ count }}</strong> (来自父作用域)
            </p>
            <button @click="count(count() - 1)">父组件按钮 (在默认插槽中)</button>
            <template slot="header">
                <div style="background-color: #e6f7ff; padding: 8px; border-radius: 4px">
                    <h4>这是父组件为 <code>header</code> 插槽提供的标题!</h4>
                    <p>
                        当前文本输入值: <em>{{ textInput }}</em> (来自父作用域)
                    </p>
                </div>
            </template>
            <template slot="footerInfo">
                <p style="font-size: 0.9em; color: #333">父组件提供的页脚信息: {{ new Date().toLocaleTimeString() }}</p>
            </template>
        </child-component>
        <p>
            来自子组件的最新消息: <strong>{{ childNotification }}</strong>
        </p>
    </div>

    <!-- ======================================== -->
    <!-- 8. NJS 模块调用示例 (新增) -->
    <!-- ======================================== -->
    <div class="container">
        <h3>8. NJS 模块调用示例 (utils.njs)</h3>
        <p>
            应用名称 (来自 utils.njs -> config.njs): <strong>{{ appNameFromUtils }}</strong>
        </p>
        <p>
            格式化日期 (来自 utils.njs): <em>{{ formattedDate }}</em>
        </p>
        <p>问候语 (来自 utils.njs): {{ greeting }}</p>
        <button @click="loadRemoteData">从 utils.njs 加载远程数据</button>
        <p n-if="remoteData">远程数据: {{ remoteData?.data }} (时间戳: {{ remoteData?.timestamp }})</p>
        <p n-if="isLoadingData">正在加载数据...</p>
    </div>

    <!-- ======================================== -->
    <!-- 9. 路由监测示例 (createUrlWatch) -->
    <!-- ======================================== -->
    <div class="container">
        <h3>9. 路由监测示例 (createUrlWatch)</h3>
        <p>
            当前侦测到的完整 URL (来自 NueCore 内部 Signal): <code class="route-code">{{ currentFullUrlForDisplay }}</code>
        </p>
        <nav class="route-nav">
            <a href="#/home-demo">访问 Home Demo</a>
            <a href="#/profile-demo/user789">访问 Profile Demo (user789)</a>
            <a href="#/profile-demo/anotherUser">访问 Profile Demo (anotherUser)</a>
            <a href="#/settings-demo?mode=editor&lang=en">访问 Settings Demo (带参数)</a>
            <a href="#/settings-demo">访问 Settings Demo (无参数)</a>
            <a href="#/non-existent-demo-path">访问一个未明确监听的路径</a>
            <a href="?">清除 Hash 和 Query (返回页面基础路径)</a>
        </nav>

        <div class="route-status">
            <h4>Home Demo Status (监听 <code>/#/home-demo$</code>):</h4>
            <p :class="{ matched: homeDemoStatus.isMatched, unmatched: !homeDemoStatus.isMatched }">
                {{ homeDemoStatus.message }}
            </p>
        </div>

        <div class="route-status">
            <h4>Profile Demo Status (监听 <code>/#/profile-demo/([^/?#]+)</code>):</h4>
            <p :class="{ matched: profileDemoStatus.isMatched, unmatched: !profileDemoStatus.isMatched }">
                {{ profileDemoStatus.message }}
                <span n-if="profileDemoStatus.userId">
                    (提取的用户 ID: <strong>{{ profileDemoStatus.userId }}</strong
                    >)</span
                >
            </p>
        </div>

        <div class="route-status">
            <h4>Settings Demo Status (监听 <code>/#/settings-demo(\?.*)?$</code>):</h4>
            <p :class="{ matched: settingsDemoStatus.isMatched, unmatched: !settingsDemoStatus.isMatched }">
                {{ settingsDemoStatus.message }}
                <span n-if="settingsDemoStatus.queryParams">
                    (提取的 Query 参数: <strong>{{ settingsDemoStatus.queryParams }}</strong
                    >)</span
                >
            </p>
        </div>
        <div class="route-status">
            <h4>通用路由信息 (监听所有变化):</h4>
            <p>{{ generalRouteInfo }}</p>
        </div>
    </div>

</template>

<script>
// --- 1. 基础状态 ---
const count = createSignal(0);
const message = createSignal("这是 <strong>默认</strong> 父消息.");
const childNotification = createSignal("等待子组件消息...");

const anotherCount = createSignal(100);
const watchLogCount = createSignal([]);
const watchLogAnotherCount = createSignal([]);
const watchersActive = createSignal(true);

let stopWatchCount = null;
let stopWatchAnotherCount = null;

// --- 2. 属性绑定状态 ---
const isHighlighted = createSignal(false);
const textColor = createSignal("blue");
const isButtonDisabled = createSignal(false);
const imageUrl = createSignal("https://via.placeholder.com/100/0000FF/FFFFFF?text=Image+1");
const imageAltText = createSignal("占位图 1");

// --- 3. 双向绑定状态 ---
const textInput = createSignal("初始文本");
const isChecked = createSignal(true);
const radioValue = createSignal("选项一");
const textAreaContent = createSignal("这是文本域的\n初始内容。");
const selectedValue = createSignal("B");

// --- 4. 条件渲染/显示状态 ---
const showElement = createSignal(true);

// --- 5. 列表渲染状态 ---
const items = createSignal([
    { id: 1, name: "苹果" },
    { id: 2, name: "香蕉" },
    { id: 3, name: "橙子" },
]);
let nextItemId = 4;

// --- 6. HTML 绑定状态 ---
const rawHtmlContent = createSignal('<p style="color:purple;">这是<em>原始</em>HTML内容。</p>');

// --- 8. NJS 模块调用状态 ---
const appNameFromUtils = createSignal("加载中...");
const formattedDate = createSignal("加载中...");
const greeting = createSignal("加载中...");
const remoteData = createSignal(null);
const isLoadingData = createSignal(false);

// --- 9. 路由监测状态 ---
const currentFullUrlForDisplay = createSignal(window.location.pathname + window.location.search + window.location.hash);
const homeDemoStatus = createSignal({ isMatched: false, message: "等待 /#/home-demo 路径..." });
const profileDemoStatus = createSignal({ isMatched: false, message: "等待 /#/profile-demo/:id 路径...", userId: null });
const settingsDemoStatus = createSignal({ isMatched: false, message: "等待 /#/settings-demo?params 路径...", queryParams: null });
const generalRouteInfo = createSignal("等待路由事件...");

let stopHomeDemoWatch = null;
let stopProfileDemoWatch = null;
let stopSettingsDemoWatch = null;
let stopGeneralUrlWatch = null;

// --- 父组件方法 ---
const add2ToCount = function () {
    count(count() + 2);
};

const toggleWatchers = () => {
    if (watchersActive()) {
        if (stopWatchCount) {
            stopWatchCount();
            const currentLogs = watchLogCount();
            watchLogCount([...currentLogs, "Watcher for 'count' stopped."]);
        }
        if (stopWatchAnotherCount) {
            stopWatchAnotherCount();
            const currentLogs = watchLogAnotherCount();
            watchLogAnotherCount([...currentLogs, "Watcher for 'anotherCount' stopped."]);
        }
        watchersActive(false);
    } else {
        console.warn("Watchers are already stopped. To re-activate, you might need to re-create them.");
    }
};

const changeMessage = function () {
    const randomNum = Math.random().toFixed(2);
    message(`<i>父消息更新于 ${new Date().toLocaleTimeString()}</i>: 随机数 <b>${randomNum}</b>`);
};

const toggleHighlight = () => isHighlighted(!isHighlighted());
const changeTextColor = () => textColor(textColor() === "blue" ? "red" : "blue");
const toggleDisable = () => isButtonDisabled(!isButtonDisabled());
const changeImage = () => {
    if (imageUrl().includes("Image+1")) {
        imageUrl("https://via.placeholder.com/100/FF0000/FFFFFF?text=Image+2");
        imageAltText("占位图 2");
    } else {
        imageUrl("https://via.placeholder.com/100/0000FF/FFFFFF?text=Image+1");
        imageAltText("占位图 1");
    }
};

const addItem = function () {
    const currentItems = items();
    items([...currentItems, { id: nextItemId++, name: `新水果 ${nextItemId - 1}` }]);
};
const removeItem = function (idToRemove) {
    items(items().filter((item) => item.id !== idToRemove));
};
const shuffleItems = function () {
    items([...items()].sort(() => Math.random() - 0.5));
};

const changeHtmlContent = function () {
    const time = new Date().toLocaleTimeString();
    rawHtmlContent(`<h4 style="color:teal;">内容已更新 @ ${time}</h4><ul><li>列表项 1</li><li>列表项 2</li></ul>`);
};

const handleChildEvent = function (payload) {
    console.log("父组件 demo.nue 收到子组件事件 'child-notified':", payload);
    let notificationText = `收到: "${payload.message}" (来自 ${payload.sourceItem || "未知项"}) at ${new Date(payload.timestamp).toLocaleTimeString()}`;
    if (payload.internalValue !== undefined) {
        notificationText += ` | 子组件内部值: ${payload.internalValue}`;
    }
    childNotification(notificationText);
};

const loadRemoteData = async () => {
    isLoadingData(true);
    remoteData(null);
    try {
        const utils = await importNjs("./utils.njs");
        const data = await utils.fetchData("userProfile");
        remoteData(data);
    } catch (err) {
        console.error("Demo.nue: 加载远程数据失败", err);
        remoteData({ data: "加载失败: " + err.message, timestamp: Date.now() });
    } finally {
        isLoadingData(false);
    }
};

// --- 生命周期钩子 (父组件的) ---
const onMount = async () => {
    console.log("父组件 (demo.nue) 已挂载 (onMount)!");

    // --- Watch 示例初始化 ---
    if (watchersActive()) {
        console.log("Initializing watchers for count and anotherCount...");
        stopWatchCount = createWatch(count, (newValue, oldValue) => {
            const logMessage = `Watch 'count': 从 ${oldValue} 变为 ${newValue} (时间: ${new Date().toLocaleTimeString()})`;
            watchLogCount([...watchLogCount(), logMessage]);
        });
        stopWatchAnotherCount = createWatch(
            anotherCount,
            (newValue, oldValue) => {
                const logMessage = `Watch 'anotherCount': 从 ${oldValue === undefined ? "undefined (首次)" : oldValue} 变为 ${newValue} (时间: ${new Date().toLocaleTimeString()})`;
                watchLogAnotherCount([...watchLogAnotherCount(), logMessage]);
            },
            { immediate: true },
        );
    }

    // --- NJS 加载 ---
    try {
        console.log("Demo.nue: 正在加载 utils.njs...");
        const utils = await importNjs("./utils.njs");
        appNameFromUtils(utils.appNameFromConfig);
        formattedDate(utils.formatDate(new Date()));
        greeting(utils.greet("演示用户"));
    } catch (err) {
        console.error("Demo.nue: 加载 utils.njs 失败", err);
        appNameFromUtils("错误");
        formattedDate("错误");
        greeting("错误");
    }

    // --- 路由监测初始化 (createUrlWatch) ---
    console.log("Initializing URL watchers...");

    // 1. 通用 URL 显示监听器
    stopGeneralUrlWatch = NueCore.createUrlWatch(
        /.*/, // 匹配任何 URL 变化
        (url) => {
            currentFullUrlForDisplay(url); // 更新 Signal 以在模板中显示
            generalRouteInfo(`当前侦测到的 URL: ${url}`);
            console.log("[Router Demo] General Watch - URL changed to:", url);
        },
        () => {}, // onUnmatch 通常对这种通用监听器不重要
    );

    // 2. Home Demo 路由监听
    stopHomeDemoWatch = NueCore.createUrlWatch(
        /#\/home-demo$/,
        (matchedUrl) => {
            homeDemoStatus({ isMatched: true, message: `成功匹配到 Home Demo 路径: ${matchedUrl}` });
            console.log("[Router Demo] Home Matched:", matchedUrl);
        },
        (newUrl) => {
            homeDemoStatus({ isMatched: false, message: `已离开 Home Demo 路径。当前 URL: ${newUrl}` });
            console.log("[Router Demo] Home Unmatched. New URL:", newUrl);
        },
    );

    // 3. Profile Demo 路由监听 (带参数提取)
    stopProfileDemoWatch = NueCore.createUrlWatch(
        /#\/profile-demo\/([^/?#]+)/,
        (matchedUrl) => {
            const match = matchedUrl.match(/#\/profile-demo\/([^/?#]+)/);
            const userId = match ? match[1] : "未知";
            profileDemoStatus({ isMatched: true, message: `成功匹配到 Profile Demo 路径: ${matchedUrl}`, userId: userId });
            console.log("[Router Demo] Profile Matched:", matchedUrl, "User ID:", userId);
        },
        (newUrl) => {
            profileDemoStatus({ isMatched: false, message: `已离开 Profile Demo 路径。当前 URL: ${newUrl}`, userId: null });
            console.log("[Router Demo] Profile Unmatched. New URL:", newUrl);
        },
    );

    // 4. Settings Demo 路由监听 (带查询参数提取)
    stopSettingsDemoWatch = NueCore.createUrlWatch(
        /#\/settings-demo(\?.*)?$/,
        (matchedUrl) => {
            const match = matchedUrl.match(/#\/settings-demo(\?(.*))?$/);
            const queryParams = match && match[2] ? match[2] : "(无参数)";
            settingsDemoStatus({ isMatched: true, message: `成功匹配到 Settings Demo 路径: ${matchedUrl}`, queryParams: queryParams });
            console.log("[Router Demo] Settings Matched:", matchedUrl, "Query:", queryParams);
        },
        (newUrl) => {
            settingsDemoStatus({ isMatched: false, message: `已离开 Settings Demo 路径。当前 URL: ${newUrl}`, queryParams: null });
            console.log("[Router Demo] Settings Unmatched. New URL:", newUrl);
        },
    );
};

const onUnmount = () => {
    console.log("父组件 (demo.nue) 即将卸载 (onUnmount)!");
    // 清理 Watcher
    if (stopWatchCount) stopWatchCount();
    if (stopWatchAnotherCount) stopWatchAnotherCount();
    watchersActive(false); // 标记 Watcher 已停止

    // 清理路由 Watcher
    if (stopGeneralUrlWatch) stopGeneralUrlWatch();
    if (stopHomeDemoWatch) stopHomeDemoWatch();
    if (stopProfileDemoWatch) stopProfileDemoWatch();
    if (stopSettingsDemoWatch) stopSettingsDemoWatch();
    console.log("All URL watchers stopped on unmount.");
};

return {
    count,
    message,
    childNotification,
    add2ToCount,
    changeMessage,
    handleChildEvent,
    anotherCount,
    watchLogCount,
    watchLogAnotherCount,
    toggleWatchers,
    watchersActive,
    isHighlighted,
    textColor,
    isButtonDisabled,
    imageUrl,
    imageAltText,
    toggleHighlight,
    changeTextColor,
    toggleDisable,
    changeImage,
    textInput,
    isChecked,
    radioValue,
    textAreaContent,
    selectedValue,
    showElement,
    items,
    addItem,
    removeItem,
    shuffleItems,
    rawHtmlContent,
    changeHtmlContent,
    appNameFromUtils,
    formattedDate,
    greeting,
    remoteData,
    isLoadingData,
    loadRemoteData,
    // 暴露路由相关的 Signals
    currentFullUrlForDisplay,
    homeDemoStatus,
    profileDemoStatus,
    settingsDemoStatus,
    generalRouteInfo,
    onMount,
    onUnmount,
};
</script>

<style>
/* 基础样式 */
body {
    font-family: sans-serif;
    padding: 20px;
    font-size: 1.1em;
    line-height: 1.6;
    background-color: #f0f2f5;
}
.container {
    border: 1px solid #d9d9d9;
    padding: 20px;
    margin-bottom: 25px;
    border-radius: 8px;
    background-color: #ffffff;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}
h2,
h3 {
    margin-top: 0;
    color: #333;
    border-bottom: 1px solid #eee;
    padding-bottom: 10px;
    margin-bottom: 15px;
}
h4 {
    margin-top: 15px;
    margin-bottom: 10px;
    color: #555;
}
button {
    padding: 8px 15px;
    margin-right: 10px;
    margin-top: 5px;
    margin-bottom: 5px;
    cursor: pointer;
    background-color: #1890ff;
    color: white;
    border: none;
    border-radius: 4px;
    font-size: 0.95em;
    transition: background-color 0.3s ease;
}
button:hover {
    background-color: #40a9ff;
}
button:disabled {
    background-color: #f5f5f5;
    color: #bfbfbf;
    cursor: not-allowed;
}
button:disabled:hover {
    background-color: #f5f5f5;
}
ul {
    padding-left: 20px;
    list-style-type: disc;
}
li {
    margin-bottom: 8px;
    padding-bottom: 8px;
    border-bottom: 1px dotted #eee;
}
li:last-child {
    border-bottom: none;
    margin-bottom: 0;
}
li button {
    padding: 3px 8px;
    font-size: 0.85em;
    margin-left: 10px;
    background-color: #ff4d4f;
}
li button:hover {
    background-color: #ff7875;
}
strong {
    color: #fa541c;
}
em {
    color: #1890ff;
}
pre {
    background-color: #f7f7f7;
    border: 1px solid #e8e8e8;
    padding: 10px;
    border-radius: 4px;
    white-space: pre-wrap;
    word-wrap: break-word;
}
code {
    background-color: #f0f0f0;
    padding: 2px 4px;
    border-radius: 3px;
    font-family: monospace;
}
.highlight {
    background-color: #fffbe6;
    border-left: 4px solid #ffe58f;
    padding: 5px 10px;
    font-weight: bold;
}
.highlight-alt {
    color: #c41d7f;
    font-style: italic;
}
.normal-text {
    color: #595959;
}
.text-large {
    font-size: 1.2em;
}
.html-container {
    border: 1px dashed #1890ff;
    padding: 15px;
    margin-top: 10px;
}

/* Watch 日志列表样式 */
#watch-log-count,
#watch-log-another-count {
    list-style-type: none;
    padding: 10px;
    margin: 5px 0 15px 0;
    max-height: 150px;
    overflow-y: auto;
    background-color: #f9f9f9;
    border: 1px solid #eee;
    border-radius: 4px;
    font-size: 0.9em;
    padding-left: 10px;
}
#watch-log-count li,
#watch-log-another-count li {
    padding: 4px 0;
    margin-bottom: 4px;
    border-bottom: 1px dotted #ddd;
    line-height: 1.4;
}
#watch-log-count li[n-if],
#watch-log-another-count li[n-if] {
    color: gray;
    font-style: italic;
    border-bottom: none;
}
#watch-log-count li:not([n-if]):last-child,
#watch-log-another-count li:not([n-if]):last-child {
    border-bottom: none;
    margin-bottom: 0;
}

/* --- 路由演示区特定样式 --- */
.route-nav {
    margin-bottom: 20px;
    padding-bottom: 15px;
    border-bottom: 1px dashed #ccc;
}
.route-nav a {
    margin-right: 12px;
    text-decoration: none;
    color: #0056b3; /* 深蓝色 */
    font-weight: 500;
    padding: 5px 8px;
    border-radius: 3px;
    transition:
        background-color 0.2s,
        color 0.2s;
}
.route-nav a:hover {
    text-decoration: none;
    background-color: #e9ecef;
    color: #003d80;
}
.route-status {
    margin-top: 15px;
    padding: 12px;
    border: 1px solid #e0e0e0;
    border-radius: 4px;
    background-color: #fdfdfd;
}
.route-status h4 {
    margin-top: 0;
    margin-bottom: 8px;
    font-size: 1em;
    color: #444;
    font-weight: 600;
}
.route-status p {
    margin: 0;
    font-size: 0.95em;
    line-height: 1.5;
}
.route-status .matched {
    color: #28a745; /* 绿色 */
    font-weight: bold;
}
.route-status .unmatched {
    color: #dc3545; /* 红色 */
}
.route-status strong {
    /* 用于高亮提取的参数 */
    color: #007bff; /* 蓝色 */
    background-color: #e7f3ff;
    padding: 1px 3px;
    border-radius: 2px;
}
.route-code {
    /* 用于显示当前 URL */
    font-size: 0.9em;
    color: #555;
    word-break: break-all;
    background-color: #eef;
    padding: 2px 5px;
    border-radius: 3px;
}
/* --- Pixi.js 演示区特定样式 --- */
.controls {
    margin-top: 20px;
    padding-top: 15px;
    border-top: 1px solid #eee;
}
.controls h4 {
    margin-top: 0;
}
</style>
