<template>
    <h2>Nono 组件 Demo (完整指令集)</h2>

    <!-- ======================================== -->
    <!-- 1. 基本计数器 (父组件状态) 与 Watch 示例 -->
    <!-- ======================================== -->
    <div class="container">
        <h3>父组件计数器 与 Watch 示例</h3>
        <p>
            父组件计数值: <strong>{{ count() }}</strong>
        </p>
        <button @click="count(count() + 1)">父组件 加 1</button>
        <button @click="add2ToCount()">父组件 加 2 (方法)</button>

        <h4>Watch 示例:</h4>
        <p>监听 <code>count</code> 值的变化 (非立即执行):</p>
        <ul id="watch-log-count">
            <li n-if="!watchLogCount().length"><em>等待 count 变化...</em></li>
            <!-- 修复: 使用 log() -->
            <li n-for="log in watchLogCount()">{{ log() }}</li>
        </ul>

        <p style="margin-top: 15px;">监听 <code>anotherCount</code> 值的变化 (立即执行):</p>
        <p>AnotherCount 当前值: <strong>{{ anotherCount() }}</strong></p>
        <button @click="anotherCount(anotherCount() + 5)">AnotherCount 加 5</button>
        <ul id="watch-log-another-count">
            <li n-if="!watchLogAnotherCount().length"><em>等待 anotherCount 变化...</em></li>
            <!-- 修复: 使用 log() -->
            <li n-for="log in watchLogAnotherCount()">{{ log() }}</li>
        </ul>
        <button @click="toggleWatchers" :disabled="!watchersActive()">
            {{ watchersActive() ? '停止所有 Watcher' : 'Watchers 已停止' }}
        </button>
    </div>

    <!-- ======================================== -->
    <!-- 2. 属性绑定 (:attribute) 示例 -->
    <!-- ======================================== -->
    <div class="container">
        <h3>属性绑定 (:attribute) 示例</h3>
        <p :class="{ highlight: isHighlighted(), 'text-large': true }">
            这段文字根据 isHighlighted() 状态动态添加 'highlight' 类。 (对象语法)
        </p>
        <p :class="isHighlighted() ? 'highlight-alt' : 'normal-text'">
            这段文字根据 isHighlighted() 状态切换 'highlight-alt' 或 'normal-text' 类。 (三元表达式)
        </p>
        <p :style="{ color: textColor(), fontSize: count() + 14 + 'px' }">
            这段文字的颜色 (textColor) 和字号 (基于 count) 是动态绑定的。
        </p>
        <button :disabled="isButtonDisabled()">
            这个按钮的 disabled 状态由 isButtonDisabled() 控制
        </button>
        <div>
            <img :src="imageUrl()" :alt="imageAltText()" width="100">
            <p>图片来源 (imageUrl): {{ imageUrl() }}</p>
        </div>
        <div :data-count="count()">
            这个 div 有一个动态的 data-count 属性: {{ count() }}
        </div>
        <button @click="toggleHighlight()">切换高亮</button>
        <button @click="changeTextColor()">改变文字颜色</button>
        <button @click="toggleDisable()">切换按钮禁用</button>
        <button @click="changeImage()">切换图片</button>
    </div>

    <!-- ======================================== -->
    <!-- 3. 双向绑定 (n-model) 示例 -->
    <!-- ======================================== -->
    <div class="container">
        <h3>双向绑定 (n-model) 示例</h3>
        <div>
            <label for="text-input">文本输入: </label>
            <input type="text" id="text-input" n-model="textInput">
            <p>输入的值: {{ textInput() }}</p>
        </div>
        <div>
            <input type="checkbox" id="checkbox-input" n-model="isChecked">
            <label for="checkbox-input">是否选中: {{ isChecked() }}</label>
        </div>
        <div>
            <p>单选按钮选择: {{ radioValue() }}</p>
            <input type="radio" id="radio-one" value="选项一" n-model="radioValue">
            <label for="radio-one">选项一</label>
            <br>
            <input type="radio" id="radio-two" value="选项二" n-model="radioValue">
            <label for="radio-two">选项二</label>
        </div>
        <div>
            <label for="textarea-input">文本域:</label><br>
            <textarea id="textarea-input" n-model="textAreaContent" rows="3" cols="30"></textarea>
            <p>文本域内容预览:</p>
            <pre>{{ textAreaContent() }}</pre>
        </div>
        <div>
            <label for="select-input">下拉选择:</label>
            <select id="select-input" n-model="selectedValue">
                <option value="">请选择</option>
                <option value="A">选项 A</option>
                <option value="B">选项 B</option>
                <option value="C">选项 C</option>
            </select>
            <p>选中的值: {{ selectedValue() }}</p>
        </div>
    </div>

    <!-- ======================================== -->
    <!-- 4. 条件渲染 (n-if) 与 条件显示 (n-show) -->
    <!-- ======================================== -->
    <div class="container">
        <h3>条件渲染 (n-if) 与 条件显示 (n-show)</h3>
        <button @click="showElement(!showElement())">
            切换显示状态 (当前: {{ showElement() }})
        </button>
        <h4>n-if 示例</h4>
        <div n-if="showElement()">
            <p>这个 div 使用 <strong>n-if="showElement()"</strong> 控制。</p>
            <p>当条件为 false 时，它会从 DOM 中移除。</p>
            <p>内部计数器: {{ count() }}</p>
        </div>
        <p n-if="!showElement()">n-if 的内容已隐藏 (DOM 中不存在)。</p>
        <h4>n-show 示例</h4>
        <div n-show="showElement()" class="show-box">
            <p>这个 div 使用 <strong>n-show="showElement()"</strong> 控制。</p>
            <p>当条件为 false 时，它会设置 style="display: none;"，但仍在 DOM 中。</p>
            <p>内部计数器: {{ count() }}</p>
        </div>
        <p>n-show 的元素始终在 DOM 树中，检查元素面板可以看到。</p>
    </div>


    <!-- ======================================== -->
    <!-- 5. 列表渲染 (n-for) 示例 -->
    <!-- ======================================== -->
    <div class="container">
        <h3>列表渲染 (n-for) 示例</h3>
        <button @click="addItem()">添加列表项</button>
        <button @click="shuffleItems()">打乱列表项</button>
        <ul>
            <li n-for="(item, index) in items()" :key="item().id">
                索引 {{ index() }}:
                {{ item().name }}
                (ID: {{ item().id }})
                <button @click="removeItem(item().id)">移除</button>
                <span :style="{ color: item().id % 2 === 0 ? 'blue' : 'green' }"> (样式绑定)</span>
            </li>
        </ul>
        <p n-if="items().length === 0">列表为空。</p>
    </div>

    <!-- ======================================== -->
    <!-- 6. HTML 内容绑定 (n-html) 示例 -->
    <!-- ======================================== -->
    <div class="container">
        <h3>HTML 内容绑定 (n-html) 示例</h3>
        <p>下面的内容由 n-html 渲染 (注意 XSS 风险):</p>
        <div class="html-container" n-html="rawHtmlContent()"></div>
        <button @click="changeHtmlContent()">改变 HTML 内容</button>
    </div>


    <!-- ======================================== -->
    <!-- 7. 子组件示例 (带插槽) -->
    <!-- ======================================== -->
    <div class="container">
        <h3>子组件示例 (带插槽)</h3>
        <p>要传递给子组件的消息 (动态 Prop): {{ message() }}</p>
        <button @click="changeMessage()">改变父组件消息 (会更新子组件)</button>
        <p>下面是子组件的内容:</p>
        
        <child-component :message="message()" static-message="这是来自父组件的静态问候" @child-notified="handleChildEvent($event)">
            <p>这是父组件提供的<strong>默认插槽</strong>内容。</p>
            <p>父组件计数器值: <strong>{{ count() }}</strong> (来自父作用域)</p>
            <button @click="count(count() - 1)">父组件按钮 (在默认插槽中)</button>
            <template slot="header">
                <div style="background-color: #e6f7ff; padding: 8px; border-radius: 4px;">
                    <h4>这是父组件为 <code>header</code> 插槽提供的标题!</h4>
                    <p>当前文本输入值: <em>{{ textInput() }}</em> (来自父作用域)</p>
                </div>
            </template>
            <template slot="footerInfo">
                 <p style="font-size:0.9em; color: #333;">父组件提供的页脚信息: {{ new Date().toLocaleTimeString() }}</p>
            </template>
        </child-component>
        <p>来自子组件的最新消息: <strong>{{ childNotification() }}</strong></p>
    </div>

    <!-- ======================================== -->
    <!-- 8. NJS 模块调用示例 (新增) -->
    <!-- ======================================== -->
    <div class="container">
        <h3>NJS 模块调用示例 (utils.njs)</h3>
        <p>应用名称 (来自 utils.njs -> config.njs): <strong>{{ appNameFromUtils() }}</strong></p>
        <p>格式化日期 (来自 utils.njs): <em>{{ formattedDate() }}</em></p>
        <p>问候语 (来自 utils.njs): {{ greeting() }}</p>
        <button @click="loadRemoteData">从 utils.njs 加载远程数据</button>
        <p n-if="remoteData()">远程数据: {{ remoteData()?.data }} (时间戳: {{ remoteData()?.timestamp }})</p>
        <p n-if="isLoadingData()">正在加载数据...</p>
    </div>

</template>

<script>
    // --- 1. 基础状态 ---
    const count = createSignal(0);
    const message = createSignal('这是 <strong>默认</strong> 父消息.');
    const childNotification = createSignal('等待子组件消息...');

    const anotherCount = createSignal(100);
    const watchLogCount = createSignal([]);
    const watchLogAnotherCount = createSignal([]);
    const watchersActive = createSignal(true);

    let stopWatchCount = null;
    let stopWatchAnotherCount = null;

    // --- 2. 属性绑定状态 ---
    const isHighlighted = createSignal(false);
    const textColor = createSignal('blue');
    const isButtonDisabled = createSignal(false);
    const imageUrl = createSignal('https://via.placeholder.com/100/0000FF/FFFFFF?text=Image+1');
    const imageAltText = createSignal('占位图 1');

    // --- 3. 双向绑定状态 ---
    const textInput = createSignal('初始文本');
    const isChecked = createSignal(true);
    const radioValue = createSignal('选项一');
    const textAreaContent = createSignal('这是文本域的\n初始内容。');
    const selectedValue = createSignal('B');

    // --- 4. 条件渲染/显示状态 ---
    const showElement = createSignal(true);

    // --- 5. 列表渲染状态 ---
    const items = createSignal([
        { id: 1, name: '苹果' },
        { id: 2, name: '香蕉' },
        { id: 3, name: '橙子' }
    ]);
    let nextItemId = 4;

    // --- 6. HTML 绑定状态 ---
    const rawHtmlContent = createSignal('<p style="color:purple;">这是<em>原始</em>HTML内容。</p>');

    // --- 8. NJS 模块调用状态 ---
    const appNameFromUtils = createSignal('加载中...');
    const formattedDate = createSignal('加载中...');
    const greeting = createSignal('加载中...');
    const remoteData = createSignal(null);
    const isLoadingData = createSignal(false);


    // --- 父组件方法 ---
    const add2ToCount = function() {
        count(count() + 2);
    };

    const toggleWatchers = () => {
        if (watchersActive()) {
            if (stopWatchCount) {
                stopWatchCount();
                const currentLogs = watchLogCount();
                watchLogCount([...currentLogs, "Watcher for 'count' stopped."]);
            }
            if (stopWatchAnotherCount) {
                stopWatchAnotherCount();
                const currentLogs = watchLogAnotherCount();
                watchLogAnotherCount([...currentLogs, "Watcher for 'anotherCount' stopped."]);
            }
            watchersActive(false);
        } else {
            console.warn("Watchers are already stopped. To re-activate, you might need to re-create them.");
        }
    };

    const changeMessage = function() {
        const randomNum = Math.random().toFixed(2);
        message(`<i>父消息更新于 ${new Date().toLocaleTimeString()}</i>: 随机数 <b>${randomNum}</b>`);
    };

    const toggleHighlight = () => isHighlighted(!isHighlighted());
    const changeTextColor = () => textColor(textColor() === 'blue' ? 'red' : 'blue');
    const toggleDisable = () => isButtonDisabled(!isButtonDisabled());
    const changeImage = () => {
        if (imageUrl().includes('Image+1')) {
            imageUrl('https://via.placeholder.com/100/FF0000/FFFFFF?text=Image+2');
            imageAltText('占位图 2');
        } else {
            imageUrl('https://via.placeholder.com/100/0000FF/FFFFFF?text=Image+1');
            imageAltText('占位图 1');
        }
    };

    const addItem = function() {
        const currentItems = items();
        items([...currentItems, { id: nextItemId++, name: `新水果 ${nextItemId - 1}` }]);
    };
    const removeItem = function(idToRemove) {
        items(items().filter(item => item.id !== idToRemove));
    };
    const shuffleItems = function() {
        items([...items()].sort(() => Math.random() - 0.5));
    };

    const changeHtmlContent = function() {
        const time = new Date().toLocaleTimeString();
        rawHtmlContent(`<h4 style="color:teal;">内容已更新 @ ${time}</h4><ul><li>列表项 1</li><li>列表项 2</li></ul>`);
    };

    const handleChildEvent = function(payload) {
        console.log("父组件 demo.nue 收到子组件事件 'child-notified':", payload);
        let notificationText = `收到: "${payload.message}" (来自 ${payload.sourceItem || '未知项'}) at ${new Date(payload.timestamp).toLocaleTimeString()}`;
        if (payload.internalValue !== undefined) {
            notificationText += ` | 子组件内部值: ${payload.internalValue}`;
        }
        childNotification(notificationText);
    };

    const loadRemoteData = async () => {
        isLoadingData(true);
        remoteData(null);
        try {
            const utils = await importNjs('./utils.njs');
            const data = await utils.fetchData('userProfile');
            remoteData(data);
        } catch (err) {
            console.error("Demo.nue: 加载远程数据失败", err);
            remoteData({ data: "加载失败: " + err.message, timestamp: Date.now() });
        } finally {
            isLoadingData(false);
        }
    };
    
    // --- 生命周期钩子 (父组件的) ---
    const onMount = async () => {
        console.log('父组件 (demo.nue) 已挂载 (onMount)!');

        // --- Watch 示例初始化 ---
        // 确保仅在 watcher 应该活动时才创建
        if (watchersActive()) {
            console.log("Initializing watchers..."); // 添加日志确认初始化

            stopWatchCount = createWatch(count, (newValue, oldValue) => {
                const logMessage = `Watch 'count': 从 ${oldValue} 变为 ${newValue} (时间: ${new Date().toLocaleTimeString()})`;
                console.log(logMessage);
                const currentLogs = watchLogCount();
                watchLogCount([...currentLogs, logMessage]);
            });

            stopWatchAnotherCount = createWatch(anotherCount, (newValue, oldValue) => {
                const logMessage = `Watch 'anotherCount': 从 ${oldValue === undefined ? 'undefined (首次)' : oldValue} 变为 ${newValue} (时间: ${new Date().toLocaleTimeString()})`;
                console.log(logMessage);
                const currentLogs = watchLogAnotherCount();
                // 确保不会无限添加日志
                // 检查是否与最后一条日志相同（简单检查，可能不够鲁棒）
                if (currentLogs.length === 0 || currentLogs[currentLogs.length - 1] !== logMessage) {
                     watchLogAnotherCount([...currentLogs, logMessage]);
                } else {
                    console.warn("Duplicate log message prevented for anotherCount watch:", logMessage);
                }
            }, { immediate: true });
        }

        // --- 原有的 onMount NJS 加载内容 ---
        try {
            console.log('Demo.nue: 正在加载 utils.njs...');
            const utils = await importNjs('./utils.njs'); 
            console.log('Demo.nue: utils.njs 加载完成!', utils);
            appNameFromUtils(utils.appNameFromConfig);
            formattedDate(utils.formatDate(new Date()));
            greeting(utils.greet('演示用户'));
            console.log('Demo.nue: 尝试再次加载 utils.njs...');
            const utilsAgain = await importNjs('./utils.njs');
            console.log('Demo.nue: utils.njs 再次加载完成 (应来自缓存)', utilsAgain);
            console.log('Demo.nue: 两次加载的 utils 是否为同一对象?', utils === utilsAgain);
        } catch (err) {
            console.error("Demo.nue: 加载 utils.njs 失败", err);
            appNameFromUtils('错误');
            formattedDate('错误');
            greeting('错误');
        }
    };

    const onUnmount = () => {
        console.log('父组件 (demo.nue) 即将卸载 (onUnmount)!');
        if (stopWatchCount) {
            stopWatchCount();
            console.log("Watcher for 'count' stopped on unmount.");
            stopWatchCount = null; // 清理引用
        }
        if (stopWatchAnotherCount) {
            stopWatchAnotherCount();
            console.log("Watcher for 'anotherCount' stopped on unmount.");
            stopWatchAnotherCount = null; // 清理引用
        }
        watchersActive(false);
    };

    return {
        count, message, childNotification, add2ToCount, changeMessage, handleChildEvent,
        anotherCount, watchLogCount, watchLogAnotherCount, toggleWatchers, watchersActive,
        isHighlighted, textColor, isButtonDisabled, imageUrl, imageAltText,
        toggleHighlight, changeTextColor, toggleDisable, changeImage,
        textInput, isChecked, radioValue, textAreaContent, selectedValue,
        showElement,
        items, addItem, removeItem, shuffleItems,
        rawHtmlContent, changeHtmlContent,
        appNameFromUtils, formattedDate, greeting, remoteData, isLoadingData, loadRemoteData,
        onMount, onUnmount
    };
</script>

<style>
/* 基础样式 */
body {
    font-family: sans-serif;
    padding: 20px;
    font-size: 1.1em;
    line-height: 1.6;
    background-color: #f0f2f5;
}
.container {
    border: 1px solid #d9d9d9;
    padding: 20px;
    margin-bottom: 25px;
    border-radius: 8px;
    background-color: #ffffff;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}
h2, h3 {
    margin-top: 0;
    color: #333;
    border-bottom: 1px solid #eee;
    padding-bottom: 10px;
    margin-bottom: 15px;
}
h4 {
    margin-top: 15px;
    margin-bottom: 10px;
    color: #555;
}
button {
    padding: 8px 15px;
    margin-right: 10px;
    margin-top: 5px;
    margin-bottom: 5px;
    cursor: pointer;
    background-color: #1890ff;
    color: white;
    border: none;
    border-radius: 4px;
    font-size: 0.95em;
    transition: background-color 0.3s ease;
}
button:hover {
    background-color: #40a9ff;
}
button:disabled {
    background-color: #f5f5f5;
    color: #bfbfbf;
    cursor: not-allowed;
}
button:disabled:hover {
    background-color: #f5f5f5;
}
ul {
    padding-left: 20px;
    list-style-type: disc;
}
li {
    margin-bottom: 8px; /* 稍微减小列表项间距 */
    padding-bottom: 8px;
    border-bottom: 1px dotted #eee;
}
li:last-child {
    border-bottom: none;
    margin-bottom: 0; /* 最后一项无下外边距 */
}
li button {
    padding: 3px 8px;
    font-size: 0.85em;
    margin-left: 10px;
    background-color: #ff4d4f;
}
li button:hover {
    background-color: #ff7875;
}
strong { color: #fa541c; }
em { color: #1890ff; }
pre {
    background-color: #f7f7f7;
    border: 1px solid #e8e8e8;
    padding: 10px;
    border-radius: 4px;
    white-space: pre-wrap;
    word-wrap: break-word;
}
code {
    background-color: #f0f0f0;
    padding: 2px 4px;
    border-radius: 3px;
    font-family: monospace;
}
.highlight {
    background-color: #fffbe6;
    border-left: 4px solid #ffe58f;
    padding: 5px 10px;
    font-weight: bold;
}
.highlight-alt { color: #c41d7f; font-style: italic; }
.normal-text { color: #595959; }
.text-large { font-size: 1.2em; }
.html-container {
    border: 1px dashed #1890ff;
    padding: 15px;
    margin-top: 10px;
}

/* Watch 日志列表样式 */
#watch-log-count, #watch-log-another-count {
    list-style-type: none;
    padding: 10px; /* 内边距 */
    margin: 5px 0 15px 0; /* 上下外边距 */
    max-height: 150px;
    overflow-y: auto;
    background-color: #f9f9f9;
    border: 1px solid #eee;
    border-radius: 4px;
    font-size: 0.9em;
}
/* 移除 ul 默认的左侧 padding */
#watch-log-count, #watch-log-another-count {
    padding-left: 10px; /* 只保留左侧内边距 */
}

/* 列表项样式 */
#watch-log-count li, #watch-log-another-count li {
    padding: 4px 0; /* 增加一点垂直内边距 */
    margin-bottom: 4px; /* 列表项之间的间距 */
    border-bottom: 1px dotted #ddd;
    line-height: 1.4; /* 调整行高 */
}
/* 后备内容样式 */
#watch-log-count li[n-if], #watch-log-another-count li[n-if] {
    color: gray;
    font-style: italic;
    border-bottom: none; /* 后备内容无分隔线 */
}
/* 移除最后一个实际日志项的下边框和下外边距 */
#watch-log-count li:not([n-if]):last-child,
#watch-log-another-count li:not([n-if]):last-child {
    border-bottom: none;
    margin-bottom: 0;
}

</style>
